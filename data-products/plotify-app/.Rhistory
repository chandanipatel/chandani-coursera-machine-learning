g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + geom_smooth(method = "lm", colour = "black")
g
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ . - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ . - 1, trees2)
lapply(list(fit, fit2), coef)
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Agriculture,swiss$Education)
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination+swiss$Catholic
efit<-lm(Firtility ~ . + ec, swiss)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,class)
fit <- lm(count ~ spray, InsectSprays)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
View(hunger)
View(hunger)
dim(hunger)
848
names(hunger)
library(swirl)
swirl()
dim(hunger)
848
0
library(swirl)
swirl()
dim(hunger)
948
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year)
summary(fit)$coef
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"] ~ hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"] ~ hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2)-predict(fit, out2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1) - deviance(fit3))/2
n/d
n <- (deviance(fit1) - deviance(fit3))/2
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
class(hits[,'date'])
as.integer(head(hits[,'date'])
,
;
as.integer(head(hits[,'date']),
;
as.integer(head(hits[,'date'])),
as.integer(head(hits[,'date']),)
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hitd[704, ]
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
install.packages("knitr")
install.packages("pdflatex")
install.packages("caret")
install.packages("kernlab")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AlzheimerDisease")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(GGally)
library(Hmisc)
## Using ggpair
training2 <- training
#cut CompressiveStrength into 4 levels.  This is the only way to work with colour in ggpair
training2$CompressiveStrength <- cut2(training2$CompressiveStrength, g=4)
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
install.packages("GGally")
library(GGally)
library(Hmisc)
## Using ggpair
training2 <- training
#cut CompressiveStrength into 4 levels.  This is the only way to work with colour in ggpair
training2$CompressiveStrength <- cut2(training2$CompressiveStrength, g=4)
ggpairs(data = training2, columns = c("FlyAsh","Age","CompressiveStrength"), mapping = ggplot2::aes(colour = CompressiveStrength))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
suppressMessages(library(caret))
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
par(mfrow = c(2,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
library(AppliedPredictiveModeling)
data(concrete)
suppressMessages(library(caret))
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
par(mfrow = c(2,1))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer + 1))
knitr::opts_chunk$set(echo = TRUE)
predictGBM <- predict(modelGBM, newdata=testData)
unlink('work/ml-ds/courseara/PracticleMachineLearning/project/PracticalMachineLearning-CourseProject_cache', recursive = TRUE)
corona_data_us_counties <- read.csv("corona-data-us-counties.csv", header = TRUE)
datewise_data = aggregate(cases~state+date, data=corona_data_us_counties, FUN=sum)
deaths_flter_data = aggregate(deaths~state+date, data=corona_data_us_counties, FUN=sum)
datewise_data['deaths']=deaths_flter_data['deaths']
setwd("~/work/ml-ds/courseara/chandani-coursera-machine-learning/data-products/plotify-app")
corona_data_us_counties <- read.csv("corona-data-us-counties.csv", header = TRUE)
datewise_data = aggregate(cases~state+date, data=corona_data_us_counties, FUN=sum)
deaths_flter_data = aggregate(deaths~state+date, data=corona_data_us_counties, FUN=sum)
datewise_data['deaths']=deaths_flter_data['deaths']
fig <- datewise_data %>% plot_ly()
fig <- fig %>% add_trace(x = ~date, y = ~cases, type = 'bar', textposition = 'auto', name = 'Cases',
marker = list(color = 'rgb(158,202,225)'))
fig <- fig %>% add_trace(x = ~date, y = ~deaths, type = 'bar', textposition = 'auto', name = 'Deaths',
marker = list(color = 'rgb(228,87,81)'))
fig <- fig %>% layout(title = "US COVID-2019 Cases and Deaths Report",
barmode = 'group', xaxis = list(title = "Date"),
yaxis = list(title = "Cases V/S Deaths"))
fig
library(plotly)
fig <- datewise_data %>% plot_ly()
fig <- fig %>% add_trace(x = ~date, y = ~cases, type = 'bar', textposition = 'auto', name = 'Cases',
marker = list(color = 'rgb(158,202,225)'))
fig <- fig %>% add_trace(x = ~date, y = ~deaths, type = 'bar', textposition = 'auto', name = 'Deaths',
marker = list(color = 'rgb(228,87,81)'))
fig <- fig %>% layout(title = "US COVID-2019 Cases and Deaths Report",
barmode = 'group', xaxis = list(title = "Date"),
yaxis = list(title = "Cases V/S Deaths"))
fig
satewise_data = aggregate(cases~state, data=corona_data_us_counties, FUN=sum)
deaths_satewise_data = aggregate(deaths~state, data=corona_data_us_counties, FUN=sum)
satewise_data['deaths'] = deaths_satewise_data['deaths']
View(satewise_data)
df=satewise_data
df$hover <- with(df, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
View(df)
l <- list(color = toRGB("red"), width = 2)
View(l)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
View(g)
fig <- plot_geo(df, locationmode = 'USA-states')
fig <- fig %>% add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Cases")
fig <- fig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
fig <- plot_geo(df, locationmode = 'USA-states')
fig <- fig %>% add_trace(
z = ~cases, text = ~hover, locations = ~state,
color = ~cases, colors = 'Purples'
)
fig <- fig %>% colorbar(title = "Cases")
fig <- fig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
fig
state_codes <- read.csv("us_codes.csv", header = TRUE)
df['code'] = df.apply (lambda row: state_codes[row.state], axis=1)
df.apply (lambda row: row['code'] = state_codes[row.state], axis=1)
df$code <- with(df, state_codes[state])
View(df)
df$code <- aapply(df, FUN = function(x) state_codes[x['state']])
df$code <- apply(df, FUN = function(x) state_codes[x['state']])
df$code <- apply(df, 1, FUN = function(x) state_codes[x['state']])
df$code <- state_codes[as.matrix(df[c("state")])]
View(df)
df$code <- state_codes[df["state"])]
df$code <- state_codes[df["state"]]
df$code <- state_codes[as.matrix(df["state"])]
View(df)
df=satewise_data
df$code<-satewise_data[match(df$state, df$state),2]
View(df)
df$code<-satewise_data[match(df$state, df$state),1]
View(df)
df$code<-state_codes[match(df$state, state_codes$state),1]
state_codes <- read.csv("us_codes.csv", header = TRUE)
df$code<-state_codes[match(df$state, state_codes$state),1]
df$hover <- with(df, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(df, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~state,
color = ~cases, colors = 'Purples'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
mapfig
mapfig <- plot_geo(df, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Purples'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
mapfig
mapfig <- plot_geo(df, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
mapfig
mapfig <- plot_geo(df, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
mapfig
knitr::opts_chunk$set(echo = TRUE)
# Load Data sets
corona_data_us_counties <- read.csv("corona-data-us-counties.csv", header = TRUE)
state_codes <- read.csv("us_codes.csv", header = TRUE)
# Assign state code in main dataset from state_codes
corona_data_us_counties$code<-state_codes[match(corona_data_us_counties$state, state_codes$state),1]
# Agrregate data for day
datewise_data = aggregate(cases~state+date, data=corona_data_us_counties, FUN=sum)
deaths_flter_data = aggregate(deaths~state+date, data=corona_data_us_counties, FUN=sum)
datewise_data['deaths']=deaths_flter_data['deaths']
# Generate Data from states
statewise_data = aggregate(cases~state, data=corona_data_us_counties, FUN=sum)
deaths_satewise_data = aggregate(deaths~state, data=corona_data_us_counties, FUN=sum)
statewise_data['deaths'] = deaths_satewise_data['deaths']
statewise_data$hover <- with(statewise_data, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(statewise_data, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
# Load Data sets
corona_data_us_counties <- read.csv("corona-data-us-counties.csv", header = TRUE)
state_codes <- read.csv("us_codes.csv", header = TRUE)
# Assign state code in main dataset from state_codes
corona_data_us_counties$code<-state_codes[match(corona_data_us_counties$state, state_codes$state),1]
# Agrregate data for day
datewise_data = aggregate(cases~state+date, data=corona_data_us_counties, FUN=sum)
deaths_flter_data = aggregate(deaths~state+date, data=corona_data_us_counties, FUN=sum)
datewise_data['deaths']=deaths_flter_data['deaths']
# Generate Data from states
statewise_data = aggregate(cases~state, code, data=corona_data_us_counties, FUN=sum)
View(statewise_data)
View(corona_data_us_counties)
# Load Data sets
corona_data_us_counties <- read.csv("corona-data-us-counties.csv", header = TRUE)
state_codes <- read.csv("us_codes.csv", header = TRUE)
# Assign state code in main dataset from state_codes
corona_data_us_counties$code<-state_codes[match(corona_data_us_counties$state, state_codes$state),1]
# Agrregate data for day
datewise_data = aggregate(cases~state+date, data=corona_data_us_counties, FUN=sum)
deaths_flter_data = aggregate(deaths~state+date, data=corona_data_us_counties, FUN=sum)
datewise_data['deaths']=deaths_flter_data['deaths']
# Generate Data from states
statewise_data = aggregate(cases~state+code, data=corona_data_us_counties, FUN=sum)
deaths_satewise_data = aggregate(deaths~state, data=corona_data_us_counties, FUN=sum)
statewise_data['deaths'] = deaths_satewise_data['deaths']
View(statewise_data)
statewise_data$hover <- with(statewise_data, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(statewise_data, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = 'COVID-19 cases v/s deaths in US <br>(Hover for breakdown)',
geo = g
)
mapfig
statewise_data$hover <- with(statewise_data, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(statewise_data, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = list(text='COVID-19 cases v/s deaths in US <br>(Hover for breakdown)', y = 0.8),
geo = g
)
mapfig
statewise_data$hover <- with(statewise_data, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(statewise_data, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = list(text='COVID-19 cases v/s deaths in US <br>(Hover for breakdown)', x = 0.8),
geo = g
)
mapfig
statewise_data$hover <- with(statewise_data, paste(state, '<br>', "Cases", cases, "Deaths", deaths))
# give state boundaries a white border
l <- list(color = toRGB("red"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('red')
)
mapfig <- plot_geo(statewise_data, locationmode = 'USA-states')
mapfig <- mapfig %>% add_trace(
z = ~cases, text = ~hover, locations = ~code,
color = ~cases, colors = 'Reds'
)
mapfig <- mapfig %>% colorbar(title = "Cases")
mapfig <- mapfig %>% layout(
title = list(text='COVID-19 cases v/s deaths in US <br>(Hover for breakdown)', x = 0),
geo = g
)
mapfig
View(df)
fig <- datewise_data %>% plot_ly()
fig <- fig %>% add_trace(x = ~date, y = ~cases, type = 'bar', textposition = 'auto', name = 'Cases',
marker = list(color = 'rgb(158,202,225)'))
fig <- fig %>% add_trace(x = ~date, y = ~deaths, type = 'bar', textposition = 'auto', name = 'Deaths',
marker = list(color = 'rgb(228,87,81)'))
fig <- fig %>% layout(title = list(text="US COVID-2019 Cases and Deaths Report", x=0.2),
barmode = 'group', xaxis = list(title = "Date"),
yaxis = list(title = "Cases V/S Deaths"))
fig
fig <- datewise_data %>% plot_ly()
fig <- fig %>% add_trace(x = ~date, y = ~cases, type = 'bar', textposition = 'auto', name = 'Cases',
marker = list(color = 'rgb(158,202,225)'))
fig <- fig %>% add_trace(x = ~date, y = ~deaths, type = 'bar', textposition = 'auto', name = 'Deaths',
marker = list(color = 'rgb(228,87,81)'))
fig <- fig %>% layout(title = list(text="US COVID-2019 Cases and Deaths Report", x=0),
barmode = 'group', xaxis = list(title = "Date"),
yaxis = list(title = "Cases V/S Deaths"))
fig
